<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>intro on Adam Hartleb</title>
    <link>/tags/intro/</link>
    <description>Recent content in intro on Adam Hartleb</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <copyright>Â©2020 Adam Hartleb.</copyright>
    <lastBuildDate>Fri, 13 Mar 2020 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="/tags/intro/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Intro to C&#43;&#43; - Types</title>
      <link>/post/intro-to-cpp-types/</link>
      <pubDate>Fri, 13 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/intro-to-cpp-types/</guid>
      <description>We&amp;rsquo;ll be investigating the primitive types C++ has to offer in this post and reference types in the following post.
Integers The Integer type store whole numbers and come in four sizes: short int, int, long int, long long int. In addition, each type can be signed (negative whole numbers permitted) or unsigned (only positive numbers).
A short is typically 2 bytes in size and an int is 4 bytes. A long is 4 bytes on everything except on 64-bit Linxu/macOS where it is 8 bytes.</description>
    </item>
    
    <item>
      <title>Intro to C&#43;&#43; - Getting Started</title>
      <link>/post/intro-to-cpp/</link>
      <pubDate>Tue, 10 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/intro-to-cpp/</guid>
      <description>To begin, we write human-redable C++ code in a source file which is then compiled to produce machine code that our computers can run. Here&amp;rsquo;s an example of a minimal source file:
// main.cpp#include &amp;lt;cstdio&amp;gt;int main() {printf(&amp;quot;Hello, World!&amp;quot;);return 0;}The above declares a function called main which serves as an entry point to our program, after all, the program has to stat somewhere. Within our main function we call another function printf which prints the text to the terminal.</description>
    </item>
    
    <item>
      <title>Intro to Rust - Collections</title>
      <link>/post/intro-to-rust-collections/</link>
      <pubDate>Fri, 06 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/intro-to-rust-collections/</guid>
      <description>Collections are data structures that contain multiple values. However, unlike arrays and tuples that are stored on the stack, these types are stored on the heap.
Vectors Vectors are similar to arrays except they can grow dynamically. Like an array, it can only store a single data type. To a create a new vector, we write:
let a: Vec&amp;lt;u32&amp;gt; = Vec::new();The type annotation above is necessary as we&amp;rsquo;ve created an empty vector so Rust has nothing to infer from.</description>
    </item>
    
    <item>
      <title>Intro to Machine Learning</title>
      <link>/post/intro-to-machine-learning/</link>
      <pubDate>Thu, 05 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/intro-to-machine-learning/</guid>
      <description>Machine learning is the field of study that gives a computer the ability to learn without being explicitly programmed.
As an example, the spam filter from your email provider can learn and analyze what emails are being reported as spam and then apply that filter before the email even reaches you. If we were to program this manually, we might use regular expressions to search for certain keywords we provide in the email and feed each email that comes in through that algorithm.</description>
    </item>
    
    <item>
      <title>Intro to Rust - Structs</title>
      <link>/post/intro-to-rust-structs/</link>
      <pubDate>Tue, 03 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/intro-to-rust-structs/</guid>
      <description>A struct is a data type that allows you to group multiple related values under a single type. To define a struct in Rust, we use the struct keyword:
struct Point {x: i32,y: i32,}And we create an instance of the struct like so:
let p = Point{ x: 3, y: 4 };And to access a field on the struct we use dot notation:
println!(&amp;quot;x: {}, y: {}&amp;quot;, p.</description>
    </item>
    
    <item>
      <title>Intro to Rust - Ownership</title>
      <link>/post/intro-to-rust-ownership/</link>
      <pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>/post/intro-to-rust-ownership/</guid>
      <description>Every programming language has to have some way to manage the memory it consumes while the program is running. In higher level languages like JavaScript this is managed with a garbage collector or with lower level languages like C, the memory is allocated and freed manually. Rust uses a different approach with a concept known as ownership.
Stack and Heap The stack and heap are parts of memory that your program can utilize at runtime.</description>
    </item>
    
    <item>
      <title>Intro to Rust - Variables</title>
      <link>/post/intro-to-rust-variables/</link>
      <pubDate>Wed, 26 Feb 2020 10:48:11 -0800</pubDate>
      
      <guid>/post/intro-to-rust-variables/</guid>
      <description>Variables are conceptually labeled boxes that we can store values. The box is the address in memory where the value is stored and the label is just a human readable alias for that address.
All variable declarations in Rust start with the let keyword followed by the name we assign to variable. Here we are declaring a variable called z and assigning the value 12 to it:
let z = 12;By default, all variables in Rust are immutable meaning you cannot re-assign a value to them.</description>
    </item>
    
    <item>
      <title>Intro to Rust - Hello World</title>
      <link>/post/intro-to-rust-hello-world/</link>
      <pubDate>Tue, 25 Feb 2020 10:48:11 -0800</pubDate>
      
      <guid>/post/intro-to-rust-hello-world/</guid>
      <description>Installing and configuring Rust is a breeze with rustup which is an installer for Rust. You can download it by visiting:
https://rustup.rs/
And following the onscreen instructions. You can confirm that the installation has worked by running:
rustc --versionThe rustup installation also comes with another command line tool called cargo which is the Rust packager manager &amp;ndash; akin to npm for Node. Rust packages are called crates and there is an online repository of crates visible here:</description>
    </item>
    
    <item>
      <title>Intro to Typescript - Getting Started</title>
      <link>/post/intro-to-typescript/</link>
      <pubDate>Mon, 24 Feb 2020 10:48:11 -0800</pubDate>
      
      <guid>/post/intro-to-typescript/</guid>
      <description>What is TypeScript? TypeScript is a transpile-to-JavaScript language meaning that a program written in Typescript must first be translated (transpiled) to JavaScript before it can be run in the browser. Although compiling typically has a different meaning, the TypeScript community refers to this process as compilation. Why would anyone want to go through this process though? Because TypeScript comes with a host of features on top of those already available in JavaScript, all aimed at making writing JavaScript code more robust.</description>
    </item>
    
    <item>
      <title>Intro to Object Oriented Programming</title>
      <link>/post/intro-to-oop/</link>
      <pubDate>Fri, 21 Feb 2020 15:07:11 -0800</pubDate>
      
      <guid>/post/intro-to-oop/</guid>
      <description>Introduction What exactly is an object? An object is defined by two components: properties and behaviors. A car has properties like its color, the year it was made, if it&amp;rsquo;s 4WD or not, etc. It also has behaviors such as starting, driving and so on. Having both of these components is key because if you just have behaviors then you&amp;rsquo;re simply dealing with functions that transform their inputs and return the output.</description>
    </item>
    
  </channel>
</rss>